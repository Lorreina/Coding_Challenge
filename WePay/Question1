Given a binary tree and a node, connect the path from the root to that node in the form of a doubly linked list.


   3
 /   \
1     5
 \   / \
  2 4   6

Node input: 5
Output: 3<->5


   3
 /   \
1     5
 \
  2

Node input: 2
Output: 3<->1<->2


class ListNode {
  int data;
  ListNode prev;
  ListNode next;

  ListNode(int data, ListNode prev, ListNode next) {
    this.data = data;
    this.prev = prev;
    this.next = next;
  }
}

class TreeNode {
  int data;
  TreeNode left;
  TreeNode right;

  TreeNode(int data, TreeNode left, TreeNode right) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

ListNode constructListFromTree(TreeNode root, TreeNode goal) {
    ListNode result = null;
    if (root == null || goal == null) {
        return result;
    }
    
    Stack<TreeNode> stack = new Stack<TreeNode> ();
    TreeNode curr = root;
    
    boolean isFound = false;
    while (!stack.isEmpty() || curr != null) {
        if (curr == goal) {
            isFound = true;
            break;
        }
        if (curr != null) {
            stack.push(curr);
            curr = curr.left;
        } else {
            TreeNode node = stack.pop();
            curr = node.right;
        }
    }
    
    if (isFound == false) {
        return result;
    }
    
    ListNode tail = new ListNode(stack.pop().val, null, null);
    while (!stack.isEmpty()) {
        ListNode tmp = new ListNode(stack.pop().val, null, tail);
        tail.prev = tmp;
        tail = tmp;
    }
    
    return tail;

}