import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

public class Valid_Special_Binary_Tree {
	HashMap<Character, ArrayList<Character>> map;
	char root;
	
	public int readData(ArrayList<ArrayList<Character>> input) {
		if (input == null || input.size() == 0) {
			System.out.println("input is blank! Please try again.");
			return -1;
		}
		
		map = new HashMap<Character, ArrayList<Character>> ();
		HashSet<Character> set = new HashSet<Character> ();
		HashSet<Character> all = new HashSet<Character> ();
		boolean hasDup = false;
		boolean hasCycle = false;
		for (int i = 0; i < input.size(); i++) {
			if (set.contains(input.get(i).get(0))) {
				hasCycle = true;
			}
			if (map.containsKey(input.get(i).get(0))) {
				ArrayList<Character> tmp = map.get(input.get(i).get(0));
				if (tmp.size() == 2) {
					System.out.println("Error: E1!");
					return -1;
				} else {
					if (tmp.get(0) == input.get(i).get(1)) {
						hasDup = true;
					}
					tmp.add(input.get(i).get(1));
					set.add(input.get(i).get(0));
				}
			} else {
				ArrayList<Character> tmp = new ArrayList<Character> ();
				tmp.add(input.get(i).get(1));
				map.put(input.get(i).get(0), tmp);
			}
			all.add(input.get(i).get(0));
			all.add(input.get(i).get(1));
		}
		
		if (hasDup == true) {
			System.out.println("Error: E2!");
			return -1;
		}
		
		if (hasCycle == true) {
			System.out.println("Error: E3!");
			return -1;
		}
		
		if (all.size() - map.size() > 1) {
			System.out.println("Error: E4!");
		}
		
		// find root
		Iterator itr = all.iterator();
		if (itr.hasNext()) {
			char c = (char) itr.next();
			if (!map.containsKey(c)) {
				root = c;
			}
		}
		
		return 1;
	}
	
	public void buildTree(char c) {
		System.out.print("(");
		System.out.print(c);
		if (map.containsKey(c)) {
			ArrayList<Character> tmp = map.get(c);
			if (tmp.size() == 1) {
				buildTree(tmp.get(0));
			} else {
				if (tmp.get(0) < tmp.get(1)) {
					buildTree(tmp.get(0));
					buildTree(tmp.get(1));
				} else {
					buildTree(tmp.get(1));
					buildTree(tmp.get(0));
				}
			}
		}
		System.out.print(")");
	}
	
	public static void main(String[] args) {
		ArrayList<ArrayList<Character>> input = new ArrayList<ArrayList<Character>> ();
		readData(input);
		
	}
	
}
