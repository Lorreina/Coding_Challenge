/**
 * LeetCode
 * 214. Shortest Palindrome
 * @author lorreina
 *
 */
public class Shortest_Palindrome {
	// any better solutions?
	
	/*
	public String shortestPalindrome(String s) {
        if (s == null || s.length() <= 1) {
            return s;
        }
        
        char[] ch = s.toCharArray();
        int end = ch.length - 1;
        for (; end >= 0; end--) {
            if (isPalindrome(ch, end)) {
                break;
            }
        }
        
        StringBuilder head = new StringBuilder();
        for (int i = ch.length - 1; i > end; i--) {
            head.append(ch[i]);
        }
        
        head.append(s);
        return head.toString();
    }
    
    private boolean isPalindrome(char[] ch, int end) {
        int i = 0, j = end;
        while (i < j) {
            if (ch[i] != ch[j]) {
                return false;
            }
            i++;
            j--;
        }
        
        return true;
    }
    
    */
	
	// KMP
	public String shortestPalindrome(String s) {
        if (s == null || s.length() <= 1) {
            return s;
        }
        
        char[] ch = s.toCharArray();
        int[] table = getTable(s);
//        int[] table = new int[ch.length];
//        int j = 0;
//        for (int i = 0; i < table.length; i++) {
//            int index = table.length - j - 1;
//            if (i == 0) {
//                if (ch[i] == ch[index]) {
//                    table[i] = 1;
//                    j++;
//                }
//            } else {
//                if (ch[i] == ch[index]) {
//                    table[i] = table[i - 1] + 1;
//                    j++;
//                } else {
//                    j = 0;
//                }
//            }
//        }
        
        int end = table[table.length - 1];
        
        StringBuilder head = new StringBuilder();
        for (int i = ch.length - 1; i >= end; i--) {
            head.append(ch[i]);
        }
        
        head.append(s);
        return head.toString();
    }
	
	private int[] getTable(String s){
	    int[] table = new int[s.length()];

	    int index = 0;
	    for(int i = 1; i < s.length(); ){
	        if(s.charAt(index) == s.charAt(i)){
	            table[i] = ++index;
	            i++;
	        } else {
	            if(index > 0){
	                index = table[index-1];
	            } else {
	                index = 0;
	                i ++;
	            }
	        }
	    }
	    return table;
	}
    
    public static void main(String[] args) {
    	Shortest_Palindrome tmp = new Shortest_Palindrome();
    	String s = "aacecaaa";
    	System.out.println(tmp.shortestPalindrome(s));
    }
}
