/**
 * LeetCode
 * 
 * @author lorreina
 *
 */
public class Unique_Paths_II {
	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0].length == 0) {
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        
        int[] dp = new int[n];
        int[] dpTmp = new int[n];
        int[] col = new int[m];
        for (int j = 0; j < n; j++) {
            if (obstacleGrid[0][j] == 1) {
                break;
            }
            dp[j] = 1;
        }
        for (int i = 0; i < m; i++) {
            if (obstacleGrid[i][0] == 1) {
                break;
            }
            col[i] = 1;
        }
        
        
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (j == 0) {
                    dpTmp[j] = col[i];
                } else {
                    if (obstacleGrid[i][j] == 0) {
                        dpTmp[j] = dpTmp[j - 1] + dp[j];
                    }
                }
            }
            int[] tmp = dp;
            dp = dpTmp;
            dpTmp = tmp;
        }
        
        return dp[dp.length - 1];
    }
	
	public static void main(String[] args) {
		int[][] obstacleGrid = {{0,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,0}};
		Unique_Paths tmp = new Unique_Paths();
		System.out.println(tmp.uniquePathsWithObstacles(obstacleGrid));
	}
}
