import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class Valid_Special_Binary_Tree {
	HashMap<Character, ArrayList<Character>> map;
	public int readData(ArrayList<ArrayList<Character>> input) {
		if (input == null || input.size() == 0) {
			System.out.println("input is blank! Please try again.");
			return -1;
		}
		
		map = new HashMap<Character, ArrayList<Character>> ();
		HashSet<Character> set = new HashSet<Character> ();
		boolean hasDup = false;
		boolean hasCycle = false;
		for (int i = 0; i < input.size(); i++) {
			if (map.containsKey(input.get(i).get(0))) {
				ArrayList<Character> tmp = map.get(input.get(i).get(0));
				if (tmp.size() == 2) {
					System.out.println("Error: E1!");
					return -1;
				} else {
					if (tmp.get(0) == input.get(i).get(1)) {
						hasDup = true;
					}
					tmp.add(input.get(i).get(1));
					set.add(input.get(i).get(0));
					if (set.contains(input.get(i).get(1))) {
						hasCycle = true;
					}
				}
			}
		}
		
		if (hasDup == true) {
			System.out.println("Error: E2!");
			return -1;
		}
		
		if (hasCycle == true) {
			System.out.println("Error: E3!");
			return -1;
		}
		
		
		
		
		
		return 1;
	}
}
