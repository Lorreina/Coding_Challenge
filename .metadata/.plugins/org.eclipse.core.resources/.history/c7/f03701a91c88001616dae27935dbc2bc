import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * CC150 Synchrinization adn Locks
 * @author lorreina
 *
 */
public class Lock_Example {
	public class LockedATM {
		private Lock lock;
		private int balance = 100;
		
		public LockedATM() {
			lock = new ReentrantLock();
		}
		
		public int withdraw(int value) {
			lock.lock();
			int tmp = balance;
			try {
				Thread.sleep(100);
				tmp = tmp - value;
				Thread.sleep(100);
				balance = tmp;
			} catch (InterruptedException exc) {
				
			}
			lock.unlock();
			return balance;
		}
		
		public int deposit(int value) {
			lock.lock();
			int tmp = balance;
			try {
				Thread.sleep(100);
				tmp = tmp + value;
				Thread.sleep(100);
				balance = tmp;
			} catch (InterruptedException exc) {
				
			}
			lock.unlock();
			return balance;
		}
	}
	
	public static void main(String[] args) {
		Lock_Example tmp = new Lock_Example();
		
	}
}
