
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class DeadLock {
	public static class runA implements Runnable {
		Lock lock1;
		Lock lock2;
		public runA(Lock lock1, Lock lock2) {
			this.lock1 = lock1;
			this.lock2 = lock2;
		}
		public void run() {
			this.lock1.lock();
			System.out.println(Thread.currentThread().getName() + " lock1");
			
			
		}
	}
	public static void main(String[] args) {
		final Lock lock1 = new ReentrantLock();
		final Lock lock2 = new ReentrantLock();

		Runnable runA = new Runnable() {
			public void run() {
				lock1.lock();
				System.out.println(Thread.currentThread().getName() + " lock1");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				lock2.lock();
				System.out.println(Thread.currentThread().getName() + " lock2");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				lock2.unlock();
				lock1.unlock();
			}
		};

		Thread threadA = new Thread(runA, "threadA");
		threadA.start();

		Runnable runB = new Runnable() {
			public void run() {
				lock2.lock();
				System.out.println(Thread.currentThread().getName() + " lock2");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				lock1.lock();
				System.out.println(Thread.currentThread().getName() + " lock1");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				lock1.unlock();
				lock2.unlock();
			}
		};

		Thread threadB = new Thread(runB, "threadB");
		threadB.start();

		
	}
}
