import java.util.ArrayDeque;
import java.util.ArrayList;

public class Robot_Distance {
	public static int distance(int[][] location) {
		int[][] original = new int[location.length][location[0].length];
		int[][] isMarked = new int[location.length][location[0].length];
		ArrayList<Integer> robot = new ArrayList<Integer> ();
		int row = location[0].length;
		for (int i = 0; i < location.length; i++) {
			for (int j = 0; j < location[0].length; j++) {
				if (location[i][j] == 1) {
					robot.add(i * row + j);
					isMarked[i][j] = 1;
				} else if (location[i][j] == -1) {
					original[i][j] = -1;
					isMarked[i][j] = 1;
				}
			}
		}
		int[][][] dis = new int[robot.size()][location.length][row];
		int x, y;
		int index;
		for (int i = 0; i < robot.size(); i++) {
			dis[i] = original;
			int[][] marked = isMarked;
			ArrayDeque<Integer> queue = new ArrayDeque<Integer> ();
			queue.add(robot.get(i));
			while(!queue.isEmpty()) {
				index = queue.poll();
				x = index / row;
				y = index - x * row;
				
				
				if (x > 0) {
					if (marked[x - 1][y] == 0) {
						dis[i][x - 1][y] = dis[i][x][y] + 1;
						marked[x - 1][y] = 1;
						queue.add((x - 1) * row + y);
					}
				}
				// down
				if (x < location.length - 1) {
					if (marked[x + 1][y] == 0) {
						dis[i][x + 1][y] = dis[i][x][y] + 1;
						marked[x + 1][y] = 1;
						queue.add((x + 1) * row + y);
					}
				}
				
				// left
				if (y > 0) {
					if (marked[x][y - 1] == 0) {
						dis[i][x][y - 1] = dis[i][x][y] + 1;
						marked[x][y - 1] = 1;
						queue.add(x * row + y - 1);
					}
				}
				
				// down
				if (y < row - 1) {
					if (marked[x][y + 1] == 0) {
						dis[i][x][y + 1] = dis[i][x][y] + 1;
						marked[x][y + 1] = 1;
						queue.add(x * row + y + 1);
					}
				}
			}
		}
		
		for (int i = 0; i < location.length; i++) {
			for (int j = 0; j < location[0].length; j++) {
				if (isMarked[i][j] == 1) {
					
				}
			}
		}
		
		return 0;
	}
}
