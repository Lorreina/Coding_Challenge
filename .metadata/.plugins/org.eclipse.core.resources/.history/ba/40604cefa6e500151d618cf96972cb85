
public class Connected_Island {
	public int countConnected(int[][] islands) {
		if (islands == null || islands.length == 0 || islands[0] == null || islands[0].length == 0) 
			return 0;
		
		int count = 0;
		for (int i = 0; i < islands.length; i++) {
			for (int j = 0; j < islands[0].length; j++) {
				if (islands[i][j] == 1) {
					count = Math.max(count, helper(islands, i, j));
				}
			}
		}
		
		return count;
	}
	
	private int helper(int[][] islands, int i, int j) {
		int count = 1;
		islands[i][j] = 0;
		// up
		if (i - 1 >= 0 && islands[i - 1][j] == 1) {
			count += helper(islands, i - 1, j);
		}
		
		// down
		if (i + 1 < islands.length && islands[i + 1][j] == 1) {
			count += helper(islands, i + 1, j);
		}
		
		// left
		if (j - 1 >= 0 && islands[i][j - 1] == 1) {
			count += helper(islands, i, j - 1);
		}
		
		// right
		if (j + 1 < islands[0].length && islands[i][j + 1] == 1) {
			count += helper(islands, i, j + 1);
		}
		
		return count;
	}
}
