import java.util.ArrayList;

/**
 * LeetCode
 * 321. Create Maximum Number
 * @author lorreina
 *
 */
public class Create_Maximum_Number {
	public int[] maxNumber(int[] nums1, int[] nums2, int k) {
        if (k <= 0) {
            return new int[0];
        }
        if (nums1 == null || nums1.length == 0) {
            return quickSolve(nums2, k);
        } else if (nums2 == null || nums2.length == 0) {
            return quickSolve(nums1, k);
        }
        
        int m = nums1.length;
        int n = nums2.length;
        
        int start1 = Math.max(0, m - k);
        int end1 = Math.min(m, m + n - k);
        int start2 = Math.max(0, n - k);
        int end2 = Math.min(n, m + n - k);
        
        int[] res = new int[k];
        
        for (int i = 0; i < (end1 - start1 + 1); i++) {
            int[] part1 = quickSolve(nums1, nums1.length - (start1 + i));
            int[] part2 = quickSolve(nums2, nums2.length - (end2 - i));
            
            merge(part1, part2, res);
        }
        
        return res;
    }
    
    private void merge(int[] nums1, int[] nums2, int[] res) {
        int i = 0, j = 0;
        boolean isGreat = false;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] > nums2[j]) {
                if (isGreat) {
                    res[i + j] = nums1[i];
                } else {
                    if (nums1[i] < res[i + j]) {
                        return;
                    } else if (nums1[i] > res[i + j]) {
                        isGreat = true;
                        res[i + j] = nums1[i];
                    }
                }
                i++;
            } else {
                if (isGreat) {
                    res[i + j] = nums2[j];
                } else {
                    if (nums2[j] < res[i + j]) {
                        return;
                    } else if (nums2[j] > res[i + j]) {
                        isGreat = true;
                        res[i + j] = nums2[j];
                    }
                }
                j++;
            }
        }
        
        while (i < nums1.length) {
            if (isGreat) {
                res[i + j] = nums1[i];
            } else {
                if (nums1[i] < res[i + j]) {
                    return;
                } else if (nums1[i] > res[i + j]) {
                    isGreat = true;
                    res[i + j] = nums1[i];
                }
            }
            i++;
        }
        
        while (j < nums1.length) {
            if (isGreat) {
                res[i + j] = nums1[j];
            } else {
                if (nums2[j] < res[i + j]) {
                    return;
                } else if (nums2[j] > res[i + j]) {
                    isGreat = true;
                    res[i + j] = nums2[j];
                }
            }
            j++;
        }
        
        return;
    }
    
    private ArrayList<int[]> generatePart(int[] nums, int start, int end) {
        ArrayList<Integer[]> res = new ArrayList<Integer[]> ();
        ArrayList<Integer> list = new ArrayList<Integer> ();
        
        for (int i = 0; i < nums.length; i++) {
            list.add(nums[i]);
        }
        
        if (start == 0) {
            res.add((Integer[]) list.toArray());
        }
        // delete first #start elements
        int p = 0;
        for (int i = 1; i <= end; i++) {
            if (list.size() == 1) {
                res.add(new Integer[0]);
            } else {
                while (p < list.size() - 1 && list.get(p) > list.get(p + 1)) {
                    p++;
                }
                
                if (p == list.size() - 1) {
                    list.remove(p);
                    p--;
                } else {
                    list.remove(p);
                }
                
                res.add(list.toArray(new int[list.size()]));
            }
        }
        
        return res;
    }
    
    private int[] quickSolve(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        
        int n = nums.length;
        int[] res = new int[k];
        int p = 0, s = 1, index = 0;
        for (int i = 0; i < n - k; i++) {
            if (nums[p] > nums[s]) {
                res[index++] = nums[s];
                p = s;
            }
            s++;
        }
        
        for (; s < nums.length; s++) {
            res[index++] = nums[s];
        }
        
        return res;
    }
    
	public static void main(String[] args) {
		int[] nums1 = {3,4,6,5};
		int[] nums2 = {9,1,2,5,8,3};
		int k = 5;
		Create_Maximum_Number tmp = new Create_Maximum_Number();
		int[] res = tmp.maxNumber(nums1, nums2, k);
		for (int i = 0 ; i < res.length; i++) {
			System.out.print(res[i]);
			System.out.print("  ");
		}
	}
}
