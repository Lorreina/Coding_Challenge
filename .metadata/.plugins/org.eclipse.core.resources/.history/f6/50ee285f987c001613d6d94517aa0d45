import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * LeetCode
 * 126. Word Ladder II
 * @author lorreina
 *
 */
public class Word_Ladder_II {
	int len;
	public List<List<String>> findLadders(String beginWord, String endWord, Set<String> wordList) {
        HashMap<String, List<String>> map = new HashMap<String, List<String>> ();
        List<List<String>> res = new ArrayList<> ();
        HashSet<String> isVisit = new HashSet<String> ();
        
        isVisit.add(beginWord);
      
        List<String> beginlist = new ArrayList<String> ();
        beginlist.add(beginWord);
        map.put(beginWord, beginlist);
        HashSet<String> beginSet = new HashSet<String> ();
        beginSet.add(beginWord);
        len = Integer.MAX_VALUE;
        helper(map, res, beginSet, endWord, wordList, isVisit);
        
        return res;
    }
	
	private void helper(HashMap<String, List<String>> map, 
						List<List<String>> res, 
//						HashSet<String> isVisit,
						HashSet<String> beginSet,
						String endWord,
						Set<String> wordList,
						HashSet<String> isVisit) {
		for (String beginWord : beginSet) {
			char[] ch = beginWord.toCharArray();
	        HashSet<String> tmp = new HashSet<String> ();
	        List<String> beginList = map.get(beginWord);
	        
	        if (beginList.size() >= len) {
	        	return;
	        }
	        
	        for (int i = 0; i < ch.length; i++) {
	            char old = ch[i];
	            for (char c = 'a'; c <= 'z'; c++) {
	                ch[i] = c;
	                String newWord = String.valueOf(ch);
	                
	                if (newWord.equals(endWord)) {
	                    List<String> list = new ArrayList<String> ();
	                    list.addAll(beginList);
	                    list.add(endWord);
	                    res.add(list);
	                    if (len == Integer.MAX_VALUE) {
	                    	len = list.size();
	                    }
	                } else if (wordList.contains(newWord) && !beginList.contains(newWord) && !beginSet.contains(newWord)) {
	                	tmp.add(newWord);
	                	List<String> list = new ArrayList<String> ();
	                	list.addAll(beginList);
	                	list.add(s);
	                    map.put(s, list);
	                }
	            }
	            ch[i] = old;
	        }
		}
        
//        if (!shouldStop) {
    	for (String s : tmp) {
    		List<String> list = new ArrayList<String> ();
            list.addAll(map.get(beginWord));
            list.add(s);
            map.put(s, list);
            
        	isVisit.add(s);
        	
        	helper(map, res, isVisit, s, endWord, wordList);
        	isVisit.remove(s);
    	}
//        }
	}
	
	public static void main(String[] args) {
		Word_Ladder_II tmp = new Word_Ladder_II();
		String beginWord = "hot";
		String endWord = "dog";
		Set<String> wordList = new HashSet<String> ();
		String[] wordlist = {"hot","dog","cog","pot","dot"};
		for (int i = 0; i < wordlist.length; i++) {
			wordList.add(wordlist[i]);
		}
		
		List<List<String>> res = tmp.findLadders(beginWord, endWord, wordList);
		
		for (int i = 0; i < res.size(); i++) {
			for (int j = 0; j < res.get(i).size(); j++) {
				System.out.print(res.get(i).get(j));
				System.out.print("\t");
			}
			System.out.println();
		}
	}
}
